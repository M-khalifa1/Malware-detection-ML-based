import math
def single_byte_xor(text: bytes, key: int) -> bytes:
    """Given a plain text `text` as bytes and an encryption key `key` as a byte
    in range [0, 256) the function encrypts the text by performing
    XOR of all the bytes and the `key` and returns the resultant.
    """
    return bytes([b ^ key for b in text])
def H(sentence): 
    """
    Equation 3.49 (Shannon's Entropy) is implemented.
    """
    entropy = 0 
    # There are 256 possible ASCII characters
    for character_i in range(256): 
        Px = sentence.count(chr(character_i))/len(sentence) 
        if Px > 0: 
            entropy += - Px * math.log(Px, 2) 
    return entropy

print("before reducing the entropy: ",H("sthisissimpleexamplefordemonstratiogshannonentropy"))
#xor_evation will reduce the entropy by xor with one character ""
xor_evasion=single_byte_xor(b"thisissimpleexamplefordemonstratiogshannonentropy.",67)
print("after reducing the entropy using xor-evasion: ",H(str(xor_evasion[6:10])))
